Título: Programación en la escuela secundaria

Autor: Gabriel Sanchez
Año: 2023

Introducción
En este texto voy a explorar desde mi experiencia personal en programación cuales son las ventajas y desventajas de enseñar a programar de cierta manera en varios lenguajes de programación y tecnologias.
También voy a hablar de diversos temas, como las buenas prácticas de programación.
Al escribir la monografía menciono términos técnicos que van a requerir buscar en internet qué significan porque lo escribo desde mi experiencia previa.
Escribo esta monografia como trabajo final del seminario de Trabajo y Rol Docente de la Certificación Pedagógica.
En esta carrera hay quienes van a enseñar en nivel medio, otros en nivel primario y otros en ambos.
En mi caso voy a enseñar en nivel medio por lo que pensé escribirlo para la secundaria.
Otra de las cosas que me motiva a escribir este texto es mi pasión por los videojuegos, la que a su vez me llevó a querer crear los mios.
Considero que hay muchos adolescentes a los que tambien les puede interesar y pueden aprender mejor jugando que con lógica de negocio.
Durante la escritura del desarrollo de este escrito también busqué ponerme en el lugar de alguien que no sabe programar y traté de recordar como me sentía cuando me estaban enseñando cosas que no sabía.
Otra de las cosas que traté de hacer incluso fue intentar enseñarle JavaScript a mi papá.
Escribir este texto no hubiera sido posible sin el trabajo de los desarrolladores de software libre de linux, fedora, vim, terminator, neovim y git. Esto es debido a que usé gratis sus programas para escribir este texto.

Desarrollo
¿Para quien está pensada ésta monografia? Para gente que sepa de programación y esté interesado en enseñar.
Considero que enseñar a programar en el nivel medio muchas veces está mal enfocado.
En mi caso me ha pasado que nos enseñaron cosas como html (al cual definían como un lenguaje de programación) o robótica.
También es común que se usen cosas como scratch o arduino.
Otras veces se les enseña incluso a usar programas de animación como alice.
Yo creo que lo primero que se tiene que enseñar es a usar control de versiones, especialmente git.
Después de eso se tiene que elegir un lenguaje de programación.
A mi en la carrera lo primero que me mostraron fue como usar pseudocódigo, en parte porque la mayoría de los lenguajes de programación tienen sintaxis en inglés.
Hay que evaluar el nivel de inglés de los alumnos porque no todos pueden entender inmediatamente lo que van a escribir.
Usar html puro tiene sus ventajas porque se pueden generar páginas que cargan más rápido y pesan menos que si se usan cosas como React, pero al momento de hacer cosas que no sean estáticas como centrar el texto o usar código de javascript puede ser muy dificil hacer páginas complejas.
Hacer programas de consola en los cuales se impriman resultados puede ser bastante abstracto para los alumnos.
Programar aplicaciones web con frameworks como React como primera experiencia con la programación puede ser muy dificil.
Usar motores gráficos de juego puede ser abrumador al principio porque son complejos.
Creo que usar librerias o consolas de fantasia como TIC-80 puede ser una buena idea.
También creo que es importante poder elegir un sistema operativo adecuado para programar.
En mi experiencia personal es ideal poder usar linux, pero las computadoras que hay en las escuelas de la Ciudad Autonoma de Buenos Aires, hoy en dia todas tienen únicamente windows
Una alternativa seria que se pudieran instalar máquinas virtuales con linux en esas computadoras pero en muchos casos no se permite instalar nada en esas laptops.
Otra solución seria usar linux en un usb, pero esto tiene sus limitaciones, requeriria conseguir los usb y el bootloader de la máquina deberia estar desbloqueado.
En los únicos casos en donde windows puede ser una mejor opción para programar es si se usa algún programa que no está disponible de forma nativa para linux.
Las primeras laptops que habia tenian una partición de Debian o Huayra, pero ahora solo tienen el sistema operativo de Microsoft.
Es importante que cuando se le enseña a programar algo a los alumnos no se les enseñe paso a paso como hacer un juego en especifico, sino que hay que enseñarle algoritmos para que puedan programar practicamente lo que quieran.
Además quiero destacar que hacer un juego en dos dimensiones es mucho más fácil que hacer juegos en tres dimensiones o con realidad aumentada.
En mi tiempo como programador he probado mucho software diferente para hacer juegos o programas.
Pygame, Phaser.js, Paper.js, Godot, Unity, Unreal Engine, TIC-80, entre otras.
Hay algunas de más bajo nivel escritas en lua, C, C++, C# o Rust que no pude hacer andar o son muy dificiles.
Todas tienen sus ventajas y desventajas.
Algunas son de código abierto y otras son propietarias.
En el caso de TIC-80 es de codigo abierto, pero cuenta con binarios de pago para apoyar a los desarrolladores, los cuales pueden ser compilados por uno mismo para ahorrarse pagar 10 dolares.
Una de las ventajas que tiene es que es todo en uno. Tiene editor de codigo, de sprites o imagenes, de celdas, de efectos de sonido y de musica.
Otra cosa que sirve para aprender a programar es aprender a leer el codigo de los demás.
Una pagina muy util para eso es GitHub, pero también existen otras como GitLab.
Esta pagina tambien les permite varias cosas como trabajar en proyectos colaborativamente, hacer control de versiones con git, subir una pagina web estatica, lanzar versiones en archivos binarios para varias plataformas.
Yo incluso subo mis archivos del profesorado a github para tenerlas en varias computadoras y no perder mis apuntes.
El objetivo del trabajo del docente es que los alumnos aprendan, no solo enseñar.
No es cuestión de enseñarle a la pared como hacer algo, los alumnos lo tienen que entender.
Programar no es solo cuestión de escribir código, sino todos los juegos serian poligonos de colores.
También hay que diseñar los sprites, los cuales son imagenes que se usan en el juego para representar personajes, fondos, objetos, etc.
Algo que es opcional es el sonido.
Los primeros juegos que hice eran totalmente mudos porque era dificil para mí ponerle música.
En muchos motores de juego es necesario usar programas externos para crear el sonido, pero como mencioné antes en las consolas de fantasía como TIC-80 ya tienen creadores de música.
La desventaja de esto es que si se quiere poner una canción ya existente se tiene que programar a mano toda la partitura de la canción, pero la ventaja es que si nos gusta la música retro de videojuegos como el chiptune podemos crear con este programa una versión de una canción que todavia no fue adaptada.
Escuché a bastante gente hablar sobre Minecraft Education Edition y como se usa en la escuela.
Los juegos de sandbox tienen bastante potencial para hacer que a los alumnos les interese la informatica, pero en mi opinión solo pueden en la mayoria de los casos hacer que practiquen diseño de niveles.
Si lo que se quiere es que programen usando un juego ya existente entonces lo que se podria hacer es que hagan un mod de un juego.
Para poder escribir el codigo fuente de los programas es necesario usar un editor de texto.
Hay varios programas que tienen un editor de texto integrado, pero sino yo recomiendo usar vim.
Este editor se ejecuta en el emulador de terminal pero tambien tiene una versión independiente.
La particularidad que tiene que lo diferencia de los demás editores es que es muy ligero y tiene modos que permiten editar más facilmente.
Lo primero que se le tiene que enseñar a alguien es como salir de este programa, lo cual se hace usando :q y luego enter.
Cuando se apreta Esc se entra en el modo normal, desde el cual se pueden acceder a otros modos y usar comandos.
Casi todas las letras del teclado tienen una función.
Para empezar a escribir al entrar en el modo insertar se puede usar la letra I o la A.
Considero que enseñarle a usar este editor de texto a los alumnos puede ser muy util tanto para programar como para escribir apuntes o textos.
Creo que las limitaciones tecnicas llevan a que en la mayoria de los casos se estimule la creatividad.
Cuando le pregunte a un profesor de civica de como haria una microclase de informatica para taller 1 lo que me respondio es ensenar a usar powerpoint.
En mi opinion no se si es la mejor opcion, yo preferiria darles una introduccion a javascript.
"Enseñar no existe sin el aprender" (Freire, p. 45, 1993).
Yo puedo dar una exposición sobre un tema muy avanzado de programación y los alumnos pueden no entender lo que estoy diciendo.
Para que aprendan primero tengo que ponerme en el lugar de ellos y pensar en como era yo cuando no sabia estos temas o mientras estaba aprendiendolos.
"El acto de estudiar siempre implica leer" (Freire, p. 47, 1993).
Para aprender a escribir código, primero tenemos que leer el codigo de otros, ya sea en documentacion, foros, clases, repositorios online, etc.
Es importante escribir codigo que sea legible.
Hay gente, como mi profesor de taller de programacion, que prefiere hacer comentarios en el codigo, pero recientemente vi en un video que no conviene usar comentarios.
Existen varias razones.
La primera es que los comentarios son ignorados por el compilador o el intérprete, por lo que cuando se modifica el codigo los comentarios pueden quedar desactualizados.
La segunda es que si se usan buenas practicas, como no abreviar los nombres de variables, clases y funciones, no es necesario poner comentarios.
Una mala practica es comentar codigo que no queremos que se ejecute.
Lo recomendable es directamente hacer un commit y borrar ese código, porque cuando alguien vea ese codigo en el futuro no va a querer borrarlo por pensar que es importante.
No podemos esperar que el escritor haga su tarea y la del lector (Freire, p. 53, 1993).
Escribiendo esta monografia constantemente estuve pensando en que por ahi escribia demasiados ejemplos o explicaba de mas que significaba cada termino.
Para poder leer este texto va a ser necesario tener conocimiento previo de informatica o buscar en internet a que me refiero.
Es recomendable escribir por lo menos 3 veces por semana (Freire, p. 57, 1993).
Hay que tener en cuenta que esta carta fue escrita en el siglo XX.
Hoy en dia, por la invencion de la mensajeria instántanea y las redes sociales, escribimos mucho mas que en el pasado.
Lo que si es cierto y se menciona un poco antes en esa carta es que a muchas personas les cuesta escribir y redactar correctamente en tesis o trabajos practicos.
Esto podria aplicarse también a escribir código.
Aunque no tengamos un trabajo o estemos estudiando formalmente programación, es importante que sigamos practicando programar, de manera autodidacta.
Lo bueno es que si nos gusta programar podemos desarrollar el proyecto que nosotros queramos.
En mi primer dia de clases de la carrera de Analista de Sistemas me acuerdo que el profesor preguntó si teniamos experiencia previa con la programación y yo le comenté que habia aprendido algo de HTML.
Él me dijo que tecnicamente no era un lenguaje de programación.
Considero que la formación profesional que tiene una persona influye en como escribe cada uno.
En mi caso como soy programador prefiero escribir una oración por renglon y en lugar de usar el teclado con Ñ y tildes uso el de ingles estandar porque es el que se suele usar para programar.
Tambien tuve dificultad ordenando las ideas ya que iba escribiendo lo que se me ocurria.
Otra cosa que estuve pensando es si realmente se le deberia enseñar programacion a los chicos en el secundario, en parte porque puede ser que no les interese del todo el tema.
Yo creo que depende, dado que si es una escuela orientada a ciencias sociales como el Juan B. Justo al cual yo fui no va a ser la misma cantidad de horas disponibles que en una escuela tecnica orientada a computacion.
De todas formas deberian darles aunque sea una introducción al tema.
Una de las incertidumbres que tuve escribiendo esta monografia es que no estoy seguro si estoy capacitado para enseñar Tecnologia en nivel medio porque mi formación es en su mayoria sobre programación.
Yo no sé mucho sobre como enseñar Office tampoco, ni hablar sobre las cosas que se enseñan normalmente en el primer ciclo del secundario en esta materia.
Por eso creo que quizas lo mejor para mi seria enseñar en un colegio tecnico o buscar especificamente hacer concurso para enseñar informatica o tecnologias de la información.
Tambien tuve la inquietud de que por ahi lo que yo quiera y sepa enseñar no esté dentro del plan de estudios.
A partir de ahora voy a tratar de volver a leer los textos que lei en este seminario y los apuntes que tomé para tratar de relacionarlos con lo que escribi hasta ahora.

Bibliografia:
Freire, Paulo; Cartas a quien pretende enseñar - 2" ed. 5" reimp.- Buenos Aires: Siglo Veintiuno Editores, 2010. Título original: Professora sim; tia nao: cartas a quem ousa ensinar, 1993.

-correccion que me hizo la compañera:
-muchos ejemplos
-ideas desordenadas
-terminos que no todos los docentes entienden

